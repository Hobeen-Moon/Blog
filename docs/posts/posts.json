[
  {
    "path": "posts/2021-09-20-my-second-blog-post/",
    "title": "What is RASA?",
    "description": "A short description of the post.",
    "author": [
      {
        "name": "Hobeen Moon",
        "url": "https://github.com/Hobeen-Moon/Blog.git"
      }
    ],
    "date": "2021-10-20",
    "categories": [],
    "contents": "\r\nIntroduction to RASA\r\nFor my senior project, I built a chatbot for the Data Science program at BYU-Idaho. If you look at big companies like IBM, Facebook, Google, Microsoft or Amazon all are working extensively on it and each building their own framework. I came across to RASA from my faculty mentor and I started to build a chatbot with RASA.\r\nNow lets first understand what is RASA and what all it provides. RASA stack is an open-source AI tool and being an opensource framework, It is easy to customize.\r\nRasa comes up with 2 components —\r\nRasa NLU — a library for natural language understanding (NLU) which does the classification of intent and extract the entity from the user input and helps a chatbot to understand what the user is saying.\r\nRasa Core — a chatbot framework with machine learning-based dialogue management which takes the structured input from the NLU and predicts the next best action using a probabilistic model like LSTM neural network. NLU and Core are independent and one can use NLU without Core, and vice versa. Though Rasa recommends using both.\r\nHere is the flow of Rasa Before we further discuss, Let me explain a few keywords.\r\nIntent — Intent is nothing but what the user is aiming for. For example — if the user says “Reserve a time to talk to my professor tomorrow” the intent can be classified as to book a meeting.\r\nEntity — Entity is to extract the useful information from the user input. From the example above “Reserve a time to talk with my professor tomorrow” the entities extracted would be whom and time. Whom — professor and Time — tomorrow.\r\nStories — Stories define the sample interaction between the user and the chatbot in terms of intent and action taken by the bot. Like in the example above, bot got the intent of reserve a meeting and entities like whom and time but still, there is an entity missing — no of people and that would make the next action from the bot.\r\nActions — Actions are basically the operations performed by the bot either asking for some more details to get all the entities or integrating with some APIs or querying the database to get/save some information.\r\nNow as we know some basics, Let’s dive into some actual actions. In this post, we will majorly focus on the Rasa Natural Language Understanding (NLU) which comprises of Intent Classification & Entity extraction and create a structured output which can be fed into Rasa Core.\r\nRasa Natural Language Understanding (NLU)\r\nAs we already briefed on NLU above, we need to teach our bot to understand our messages first. For that, we have to train the NLU model with our inputs in a simple text format and extract structured data. We will achieve this by defining the intents and providing a few ways users might express them. To make this work, we need to define some files. Lets first understand these files.\r\nNLU training file: It contains some training data in terms of user inputs along with the mapping of intents and entities present in each of them. The more varying examples you provide, better your bot’s NLU capabilities become.\r\nStories file: This file contains sample interactions the user and bot will have. Rasa (Core) creates a probable model of interaction from each story.\r\nDomain file: This file lists all the intents, entities, actions, templates and some more information. The templates which I just mentioned is nothing but the sample bot reply which can be used as actions.\r\nMy Thoughts on RASA\r\nHere was my brief explanation on Rasa. I’ve never built a chatbot and Rasa was my first experience on chatbot. It had great documentation and Youtube tutorials to follow. Even if it was great, I can say that it’s really hard to make a good chatbot that could answer the all of the questions that users will be asking. You have to put in all of use cases in the training data. It’s very hard to come up with all the use cases. There is a better product called Rasa X and for me, it was pain and couldn’t make it work. Even if I wasn’t able to make Rasa X to work, but it is conversation driven AI and has much better feafure than Rasa open source.\r\n\r\n\r\n\r\n",
    "preview": {},
    "last_modified": "2021-12-06T14:30:04-07:00",
    "input_file": "my-second-blog-post.knit.md"
  },
  {
    "path": "posts/welcome/",
    "title": "How to make blog using distill package",
    "description": "Welcome to my first blog. I hope you enjoy time here.",
    "author": [
      {
        "name": "Hobeen Moon",
        "url": "https://github.com/Hobeen-Moon/Blog.git"
      }
    ],
    "date": "2021-09-20",
    "categories": [],
    "contents": "\r\nAs part of the senior project, I had create a blog. There are many different tools that you could use to create a blog, but I chose distill package in R to create my blog. I Would like to show how I created this blog using distill package in R with github.\r\nFirst, open R studio and install distill package.\r\ninstall.packages(\"distill\")\r\nNext, go to github.com and create new repository.\r\n\r\nAfter you create your repository, copy the URL of your repository and open R Studio. In R Studio, create a new project. When creating a new project, choose version control and choose git options.\r\n\r\n Paste the URL of your repository and select the directory. \r\nAfter creating a new project, run the following command to create a blog using distill package. distill::create_blog(dir = getwd(), title = \"Your Blog Name\") dir command let you choose where you want to create a blog. in this case, I’m creating a blog file to my current working directory and that is why I’m using getwd(). You can change the name of your blog in title.\r\nAfter you run the command and the blog files are created, you need to restart the R Studio.\r\nAfter you restart your R studio, you can find a Build tab on your right top corner of R Studio. Click Build tab and click Build Website. \r\nNow, push everything to github. After you push it to github, go to your github repositary and click Settings  Under settings, go to pages. Change None to master and root to docs and save. \r\nTo create a new blog post, run the following command in your R Studio. distill::create_post(\"creating a blog\") You will see a Rmd file with the name you picked. Distill uses Rmd file and if you want to format it, there are many documentations about Rmd file. I recommend you to Google them and make your blog pretty.\r\nOnce you finish editing your blog, knit Rmd file. GO to Build tab and click Build Website again. Then push everything to github.\r\nNow you can see your blog post if you go to your website’s URL.\r\nYou have to click knit and Build Website whenever you create a new post. You can change the theme of your Rmd file as well. For more information about distill package, please visit Distill Package\r\n\r\n\r\n\r\n",
    "preview": {},
    "last_modified": "2021-10-18T21:03:07-06:00",
    "input_file": {}
  }
]
